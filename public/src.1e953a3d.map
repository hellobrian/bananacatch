{"version":3,"sources":["bling.js","components.js","utils.js","index.js"],"names":["$$","$","document","querySelector","bind","querySelectorAll","Node","prototype","on","window","name","fn","addEventListener","NodeList","__proto__","Array","forEach","banana","circleSvg","size","radius","fill","getRandomColor","letters","color","i","Math","floor","random","randomNumber","min","max","maxSize","minSize","sizes","randomSize","intervalId","state","getAnimationPlayState","getComputedStyle","documentElement","getPropertyValue","trim","insertBanana","id","insertAdjacentHTML","destroyBananas","innerHTML","isPlaying","intervalSpeed","style","setProperty","setInterval","observer","MutationObserver","mutationsList","mutation","type","bananaNode","addedNodes","filter","node","innerText","length","classList","remove","add","target","parentNode","removeChild","event","observe"],"mappings":"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","file":"src.1e953a3d.map","sourceRoot":"../src","sourcesContent":["// based on https://gist.github.com/paulirish/12fb951a8b893a454b32\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\nNode.prototype.on = window.on = function(name, fn) {\n  this.addEventListener(name, fn);\n};\n\nNodeList.prototype.__proto__ = Array.prototype; // eslint-disable-line\n\nNodeList.prototype.on = NodeList.prototype.addEventListener = function(\n  name,\n  fn,\n) {\n  this.forEach(elem => {\n    elem.on(name, fn);\n  });\n};\n\nexport { $, $$ };\n","import { $, $$ } from \"./bling\";\nconst circleSvg = (size = 100, fill = \"blue\") => {\n  const radius = size / 2;\n  return `\n    <svg \n      class=\"animation\"\n      width=\"${size}\"\n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\" \n      fill=${fill}\n    >\n      <circle cx=${radius} cy=${radius} r=${radius} />\n    </svg>\n  `;\n};\n\nconst banana = () => {\n  return `\n    <button \n      class=\"banana animation\" \n      type=\"button\"\n    >\n      üçå\n    </button>\n  `;\n};\n\nexport { circleSvg, banana };\n","// Return random hex string\nexport const getRandomColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Return random number between min and max\nexport const randomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min) + min);\n\nexport const maxSize = 100;\nexport const minSize = 10;\n// export const randomSize = () => randomNumber(minSize, maxSize);\n\nexport const sizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\nexport const randomSize = () => sizes[randomNumber(0, 9)];\n","import { $, $$ } from \"./bling\";\nimport { banana } from \"./components\";\nimport { randomNumber } from \"./utils\";\n\nlet intervalId;\nlet state = {\n  isPlaying: false,\n  intervalSpeed: 1500\n};\n\nconst getAnimationPlayState = () =>\n  getComputedStyle(document.documentElement)\n    .getPropertyValue(\"--animation-play-state\")\n    .trim();\n\nconst insertBanana = () => {\n  let id = randomNumber(1, 4);\n  $(`#column-${id}`).insertAdjacentHTML(\"afterbegin\", banana());\n};\n\nconst destroyBananas = () => {\n  $$(\".column\").forEach(element => {\n    element.innerHTML = \"\";\n  });\n};\n\n$(\".togglePlay\").on(\"click\", () => {\n  state = { isPlaying: !state.isPlaying, intervalSpeed: state.intervalSpeed };\n\n  document.documentElement.style.setProperty(\n    \"--animation-play-state\",\n    state.isPlaying ? \"running\" : \"paused\"\n  );\n\n  const playState = getAnimationPlayState();\n\n  if (playState === \"running\") {\n    intervalId = setInterval(insertBanana, state.intervalSpeed);\n  } else {\n    clearInterval(intervalId);\n  }\n});\n\n$(\".reset\").on(\"click\", () => {\n  clearInterval(intervalId);\n  destroyBananas();\n});\n\n// MUTATION OBSERVER\nconst observer = new MutationObserver(mutationsList => {\n  for (let mutation of mutationsList) {\n    if (mutation.type == \"childList\") {\n      const bananaNode = [...mutation.addedNodes].filter(node => node.innerText === \"üçå\");\n      if (bananaNode && bananaNode.length > 0) {\n        const banana = bananaNode[0];\n        banana.classList.remove(\"animation\");\n        banana.classList.add(\"animation\");\n        banana.addEventListener(\"animationend\", event => {\n          event.target.parentNode.removeChild(event.target);\n        });\n      }\n    }\n\n    if (mutation.type == \"attributes\") {\n      // Change togglePlay button to say Paused or Start based on state\n      $(\".togglePlay\").innerHTML = state.isPlaying ? \"Paused\" : \"Start\";\n    }\n  }\n});\n\nobserver.observe($(\"#html\"), {\n  attributes: true,\n  childList: true,\n  subtree: true\n});\n"]}