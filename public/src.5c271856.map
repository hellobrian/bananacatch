{"version":3,"sources":["bling.js","utils.js","components.js","index.js"],"names":["$$","$","document","querySelector","bind","querySelectorAll","Node","prototype","on","window","name","fn","addEventListener","NodeList","__proto__","Array","forEach","getRandomColor","letters","color","i","Math","floor","random","randomNumber","min","max","maxSize","minSize","sizes","randomSize","circleSvg","size","radius","fill","intervalId1","state","insertDot","id","insertAdjacentHTML","destroyDots","element","index","innerHTML","destroyDotsOnAnimationEnd","length","parentNode","removeChild","isPlaying","documentElement","style","setProperty","animationPlayState","getComputedStyle","getPropertyValue","trim","log","setInterval","observer","MutationObserver","mutationsList","mutation","type","svgNode","addedNodes","filter","node","nodeName","svg","classList","remove","add","target","event","observe"],"mappings":"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","file":"src.5c271856.map","sourceRoot":"../src","sourcesContent":["// based on https://gist.github.com/paulirish/12fb951a8b893a454b32\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\nNode.prototype.on = window.on = function(name, fn) {\n  this.addEventListener(name, fn);\n};\n\nNodeList.prototype.__proto__ = Array.prototype; // eslint-disable-line\n\nNodeList.prototype.on = NodeList.prototype.addEventListener = function(\n  name,\n  fn,\n) {\n  this.forEach(elem => {\n    elem.on(name, fn);\n  });\n};\n\nexport { $, $$ };\n","// Return random hex string\nexport const getRandomColor = () => {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\n\n// Return random number between min and max\nexport const randomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min) + min);\n\nexport const maxSize = 100;\nexport const minSize = 10;\n// export const randomSize = () => randomNumber(minSize, maxSize);\n\nexport const sizes = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\nexport const randomSize = () => sizes[randomNumber(0, 9)];\n","const circleSvg = (size = 100, fill = 'blue') => {\n  const radius = size / 2;\n  return `\n    <svg \n      class=\"animation\"\n      width=\"${size}\"\n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\" \n      fill=${fill}\n    >\n      <circle cx=${radius} cy=${radius} r=${radius} />\n    </svg>\n  `;\n};\n\nexport { circleSvg };\n","import { $, $$ } from './bling';\nimport { randomNumber } from './utils';\nimport { circleSvg } from './components';\n\nlet intervalId1;\nlet state = {\n  isPlaying: false,\n};\n\n// const insertDots = () => {\n//   $$('.column').forEach((element, index) =>\n//     element.insertAdjacentHTML('afterbegin', circleSvg(100, 'blue', index)),\n//   );\n// };\n\nconst insertDot = id => () => {\n  $(`#column-${id}`).insertAdjacentHTML('afterbegin', circleSvg(100, 'blue'));\n};\n\nconst destroyDots = () => {\n  $$('.column').forEach((element, index) => {\n    element.innerHTML = '';\n  });\n};\n\nconst destroyDotsOnAnimationEnd = () => {\n  if ($$('svg') && $$('svg').length > 0) {\n    $$('svg').forEach(element =>\n      element.on('animationend', event => {\n        element.parentNode.removeChild(element);\n      }),\n    );\n  }\n};\n\n$('.togglePlay').on('click', function() {\n  state = { isPlaying: !state.isPlaying };\n\n  document.documentElement.style.setProperty(\n    '--animation-play-state',\n    state.isPlaying ? 'running' : 'paused',\n  );\n\n  // Change togglePlay button to say Paused or Start based on state\n  $('.togglePlay').innerHTML = state.isPlaying ? 'Paused' : 'Start';\n\n  const animationPlayState = getComputedStyle(document.documentElement)\n    .getPropertyValue('--animation-play-state')\n    .trim();\n\n  console.log({ animationPlayState });\n  if (animationPlayState === 'running') {\n    intervalId1 = setInterval(insertDot(1), 500);\n  }\n\n  if (animationPlayState === 'paused') {\n    clearInterval(intervalId1);\n  }\n});\n\n$('.reset').on('click', () => {\n  destroyDots();\n  clearInterval(intervalId1);\n});\n\n// MUTATION OBSERVER\nconst observer = new MutationObserver(mutationsList => {\n  for (var mutation of mutationsList) {\n    if (mutation.type == 'childList') {\n      const svgNode = [...mutation.addedNodes].filter(\n        node => node.nodeName === 'svg',\n      );\n\n      if (svgNode && svgNode.length > 0) {\n        const svg = svgNode[0];\n        svg.classList.remove('animation');\n        svg.classList.add('animation');\n        svg.addEventListener('animationend', event => {\n          event.target.parentNode.removeChild(event.target);\n        });\n      }\n    }\n  }\n});\nobserver.observe($('#html'), {\n  attributes: false,\n  childList: true,\n  subtree: false,\n});\n"]}