{"version":3,"sources":["bling.js","utils.js","components.js","index.js"],"names":["$","document","querySelector","bind","$$","querySelectorAll","Node","prototype","on","window","name","fn","addEventListener","NodeList","__proto__","Array","forEach","elem","randomNumber","min","max","Math","floor","random","sizes","randomSize","circleSvg","size","fill","radius","banana","fontSize","intervalId","state","isPlaying","intervalSpeed","getAnimationPlayState","getComputedStyle","documentElement","getPropertyValue","trim","insertBanana","id","console","log","insertAdjacentHTML","destroyBananas","element","innerHTML","style","setProperty","playState","setInterval","clearInterval","observer","MutationObserver","mutationsList","mutation","type","bananaNode","addedNodes","filter","node","innerText","length","classList","remove","add","event","target","parentNode","removeChild","observe","attributes","childList","subtree"],"mappings":"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","file":"src.a2e20e7a.map","sourceRoot":"../src","sourcesContent":["// based on https://gist.github.com/paulirish/12fb951a8b893a454b32\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\nNode.prototype.on = window.on = function(name, fn) {\n  this.addEventListener(name, fn);\n};\n\nNodeList.prototype.__proto__ = Array.prototype; // eslint-disable-line\n\nNodeList.prototype.on = NodeList.prototype.addEventListener = function(\n  name,\n  fn,\n) {\n  this.forEach(elem => {\n    elem.on(name, fn);\n  });\n};\n\nexport { $, $$ };\n","// // Return random hex string\n// export const getRandomColor = () => {\n//   var letters = \"0123456789ABCDEF\";\n//   var color = \"#\";\n//   for (let i = 0; i < 6; i++) {\n//     color += letters[Math.floor(Math.random() * 16)];\n//   }\n//   return color;\n// };\n\n// // Return random number between min and max\nexport const randomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n// export const maxSize = 100;\n// export const minSize = 10;\n\nexport const sizes = [40, 45, 50, 55, 60, 65, 70, 75, 80, 85];\nexport const randomSize = () => sizes[randomNumber(0, 9)];\n","import { randomSize } from \"/utils\";\n\nconst circleSvg = (size = 100, fill = \"blue\") => {\n  const radius = size / 2;\n  return `\n    <svg \n      class=\"animation\"\n      width=\"${size}\"\n      height=\"${size}\" \n      viewBox=\"0 0 ${size} ${size}\" \n      fill=${fill}\n    >\n      <circle cx=${radius} cy=${radius} r=${radius} />\n    </svg>\n  `;\n};\n\nconst banana = (fontSize = 40) => {\n  return `\n    <button \n      class=\"banana animation\" \n      type=\"button\"\n      style=\"font-size: ${fontSize}px\"\n    >\n      üçå\n    </button>\n  `;\n};\n\nexport { circleSvg, banana };\n","import { $, $$ } from \"./bling\";\nimport { banana } from \"./components\";\nimport { randomNumber, randomSize } from \"./utils\";\n\nlet intervalId;\nlet state = {\n  isPlaying: false,\n  intervalSpeed: 900\n};\n\nconst getAnimationPlayState = () =>\n  getComputedStyle(document.documentElement)\n    .getPropertyValue(\"--animation-play-state\")\n    .trim();\n\nconst insertBanana = () => {\n  let id = randomNumber(1, 5);\n  let fontSize = randomSize();\n  console.log({ id, fontSize });\n  $(`#column-${id}`).insertAdjacentHTML(\"afterbegin\", banana(fontSize));\n};\n\nconst destroyBananas = () => {\n  $$(\".column\").forEach(element => {\n    element.innerHTML = \"\";\n  });\n};\n\n$(\".togglePlay\").on(\"click\", () => {\n  state = { isPlaying: !state.isPlaying, intervalSpeed: state.intervalSpeed };\n\n  document.documentElement.style.setProperty(\n    \"--animation-play-state\",\n    state.isPlaying ? \"running\" : \"paused\"\n  );\n\n  const playState = getAnimationPlayState();\n\n  if (playState === \"running\") {\n    intervalId = setInterval(insertBanana, state.intervalSpeed);\n  } else {\n    clearInterval(intervalId);\n  }\n});\n\n$(\".reset\").on(\"click\", () => {\n  clearInterval(intervalId);\n  destroyBananas();\n});\n\n// MUTATION OBSERVER\nconst observer = new MutationObserver(mutationsList => {\n  for (let mutation of mutationsList) {\n    if (mutation.type == \"childList\") {\n      const bananaNode = [...mutation.addedNodes].filter(node => node.innerText === \"üçå\");\n      if (bananaNode && bananaNode.length > 0) {\n        const banana = bananaNode[0];\n        banana.classList.remove(\"animation\");\n        banana.classList.add(\"animation\");\n        banana.addEventListener(\"animationend\", event => {\n          event.target.parentNode.removeChild(event.target);\n        });\n      }\n    }\n\n    if (mutation.type == \"attributes\") {\n      // Change togglePlay button to say Paused or Start based on state\n      $(\".togglePlay\").innerHTML = state.isPlaying ? \"Paused\" : \"Start\";\n    }\n  }\n});\n\nobserver.observe($(\"#html\"), {\n  attributes: true,\n  childList: true,\n  subtree: true\n});\n"]}