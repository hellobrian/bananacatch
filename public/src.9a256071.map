{"version":3,"sources":["bling.js","components.js","methods.js","index.js"],"names":["$$","$","document","querySelector","bind","querySelectorAll","Node","prototype","on","window","name","fn","addEventListener","NodeList","__proto__","Array","forEach","banana","fontSize","randomNumber","min","max","Math","floor","random","sizes","randomSize","getAnimationPlayState","getComputedStyle","rootElement","getPropertyValue","trim","insertBanana","id","insertAdjacentHTML","togglePlayState","state","style","setProperty","isPlaying","resetPlayState","destroyBananas","innerHTML","intervalId","documentElement","setInterval","intervalSpeed","observer","MutationObserver","mutationsList","mutation","type","bananaNode","addedNodes","filter","node","innerText","length","classList","remove","add","target","parentNode","removeChild","event","attributeName","observe"],"mappings":"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","file":"src.9a256071.map","sourceRoot":"../src","sourcesContent":["// based on https://gist.github.com/paulirish/12fb951a8b893a454b32\n\nconst $ = document.querySelector.bind(document);\nconst $$ = document.querySelectorAll.bind(document);\n\nNode.prototype.on = window.on = function(name, fn) {\n  this.addEventListener(name, fn);\n};\n\nNodeList.prototype.__proto__ = Array.prototype; // eslint-disable-line\n\nNodeList.prototype.on = NodeList.prototype.addEventListener = function(\n  name,\n  fn,\n) {\n  this.forEach(elem => {\n    elem.on(name, fn);\n  });\n};\n\nexport { $, $$ };\n","const banana = (fontSize = 40) => {\n  return `\n    <button \n      class=\"banana animation\" \n      type=\"button\"\n      style=\"font-size: ${fontSize}px; width: ${fontSize}px; height: ${fontSize}px\"\n    >\n      üçå\n    </button>\n  `;\n};\n\nexport { banana };\n","import { $, $$ } from \"./bling\";\nimport { banana } from \"./components\";\n\nexport const randomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nexport const sizes = [30, 40, 50, 60, 70, 75, 80, 85, 90, 95];\n\nexport const randomSize = () => sizes[randomNumber(0, 9)];\n\nexport const getAnimationPlayState = rootElement =>\n  getComputedStyle(rootElement)\n    .getPropertyValue(\"--animation-play-state\")\n    .trim();\n\nexport const insertBanana = () => {\n  let id = randomNumber(1, 5);\n  let fontSize = randomSize();\n  $(`#column-${id}`).insertAdjacentHTML(\"afterbegin\", banana(fontSize));\n};\n\nexport const togglePlayState = (state, rootElement) => {\n  rootElement.style.setProperty(\"--animation-play-state\", state.isPlaying ? \"running\" : \"paused\");\n};\n\nexport const resetPlayState = (state, rootElement) => {\n  rootElement.style.setProperty(\"--animation-play-state\", state.isPlaying ? \"running\" : \"paused\");\n};\n\nexport const destroyBananas = () => {\n  $$(\".column\").forEach(element => {\n    element.innerHTML = \"\";\n  });\n};\n","import { $ } from \"./bling\";\nimport {\n  getAnimationPlayState,\n  insertBanana,\n  togglePlayState,\n  resetPlayState,\n  destroyBananas\n} from \"./methods\";\n\nlet intervalId;\n\nlet state = {\n  isPlaying: false,\n  intervalSpeed: 900\n};\n\n$(\".togglePlay\").on(\"click\", () => {\n  state = { ...state, isPlaying: !state.isPlaying };\n  togglePlayState(state, document.documentElement);\n\n  const playState = getAnimationPlayState(document.documentElement);\n\n  if (playState === \"running\") {\n    intervalId = setInterval(insertBanana, state.intervalSpeed);\n  } else {\n    clearInterval(intervalId);\n  }\n});\n\n$(\".reset\").on(\"click\", () => {\n  state = { ...state, isPlaying: false };\n  resetPlayState(state, document.documentElement);\n  clearInterval(intervalId);\n  destroyBananas();\n});\n\nconst observer = new MutationObserver(mutationsList => {\n  for (let mutation of mutationsList) {\n    if (mutation.type == \"childList\") {\n      const bananaNode = [...mutation.addedNodes].filter(node => node.innerText === \"üçå\");\n\n      if (bananaNode && bananaNode.length > 0) {\n        const banana = bananaNode[0];\n        banana.classList.remove(\"animation\");\n        banana.classList.add(\"animation\");\n        banana.addEventListener(\"animationend\", event => {\n          event.target.parentNode.removeChild(event.target);\n        });\n      }\n    }\n\n    if (mutation.type == \"attributes\" && mutation.attributeName == \"style\") {\n      // Change togglePlay button to say Paused or Start based on state\n      $(\".togglePlay\").innerHTML = state.isPlaying ? \"Pause\" : \"Start\";\n    }\n  }\n});\n\nobserver.observe($(\"#html\"), {\n  attributes: true,\n  childList: true,\n  subtree: true\n});\n"]}